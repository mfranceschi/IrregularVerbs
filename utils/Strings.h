//
// Created by Martin on 16/01/2020.
//

#ifndef IRREGULARVERBS_MULTISTRINGS_H
#define IRREGULARVERBS_MULTISTRINGS_H

#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

typedef const char*           STRING; // Normal string
typedef       char* WRITEABLE_STRING; // Normal string that we can write on
typedef       char         CHARACTER; // Normal character

typedef struct MultiStrings_s {
    size_t length;
    STRING* array;
} MultiStrings;

extern const STRING SEPARATOR;
extern const size_t LEN_SEPARATOR; // length of SEPARATOR

/**
 * @param input A string containing one or more substrings, separated by SEPARATOR.
 * @return A newly-allocated MultiString.
 */
MultiStrings* makeMultiStrings(STRING input);

/**
 * @return A newly-allocated and independent MultiString instance, exact copy of the parameter.
 */
MultiStrings* copyMultiStrings(const MultiStrings*);

/**
 * Just frees all memory associated with the param, and the param itself (do not use it afterwards).
 */
void freeMultiStrings(MultiStrings*);


/*
 * Simple comparison functions between strings or MultiStrings.
 * If the second parameter is a MultiStrings, the functions return true if it is true for any of the contained Strings.
 */
bool isSubstringOfString(STRING potential, STRING toCompareTo);
bool isSubstringOfMultiStrings(STRING potential, const MultiStrings* toCompareTo);
bool matchesString(STRING potential, STRING toCompareTo);
bool matchesMultiStrings(STRING potential, const MultiStrings* toCompareTo);

/**
 * Transforms a MultiStrings to a normal string using concatenation with SEPARATOR.
 * @param input The MultiStrings, unchanged.
 * @return A newly-allocated MultiStrings ; to be freed with "freeStringFromMultiStrings".
 */
STRING makeStringFromMultiStrings(MultiStrings *input);

/**
 * Frees a string generated by "makeStringFromMultiString".
 */
void freeStringFromMultiStrings(STRING);

/**
 * Checks and if necessary re-formats a given string so that there are only single-byte characters (ASCII).
 * @param str The input string, which may me un-allocated.
 * @return The resulting string, which may be the input string or a newly malloc-ed string.
 */
STRING ensure_ascii(STRING str);

#endif //IRREGULARVERBS_MULTISTRINGS_H
